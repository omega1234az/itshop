import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(request) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å headers
    const user_id = request.headers.get("X-User-ID");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_id
    if (!user_id) {
      return NextResponse.json({ error: "User ID is missing in headers" }, { status: 400 });
    }

    const parsedUserId = parseInt(user_id);
    if (isNaN(parsedUserId)) {
      return NextResponse.json({ error: "Invalid User ID format" }, { status: 400 });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const cartItems = await prisma.cart.findMany({
      where: { user_id: parsedUserId },
      include: { product: true },
    });

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà 404 ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    if (cartItems.length === 0) {
      return NextResponse.json({ message: "No items found in cart" }, { status: 200 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock
    const updatedCartItems = cartItems.map((item) => ({
      ...item,
      out_of_stock: item.quantity > item.product.stock, // ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô true
    }));

    return NextResponse.json(updatedCartItems, { status: 200 });

  } catch (error) {
    console.error("Error fetching cart items:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

async function checkStock(product_id) {
  const product = await prisma.products.findUnique({
    where: { product_id: parseInt(product_id) },
    select: { stock: true },
  });

  if (!product) return { error: "Product not found" };
  return { stock: product.stock };
}

// üõí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
export async function POST(req) {
  try {
    const user_id = req.headers.get("X-User-ID");
    if (!user_id) {
      return NextResponse.json({ error: "User ID is missing in headers" }, { status: 400 });
    }

    const body = await req.json();
    const { product_id, quantity } = body;

    if (!product_id || !quantity || quantity <= 0) {
      return NextResponse.json({ error: "Invalid product_id or quantity" }, { status: 400 });
    }

    // üîé ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    const stockCheck = await checkStock(product_id);
    if (stockCheck.error) {
      return NextResponse.json({ error: stockCheck.error }, { status: 400 });
    }

    let finalQuantity = quantity > stockCheck.stock ? stockCheck.stock : quantity; // üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingCartItem = await prisma.cart.findFirst({
      where: {
        user_id: parseInt(user_id),
        product_id: parseInt(product_id),
      },
    });

    if (existingCartItem) {
      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
      let newQuantity = existingCartItem.quantity + finalQuantity;
      newQuantity = newQuantity > stockCheck.stock ? stockCheck.stock : newQuantity; // üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å

      // üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      const updatedCartItem = await prisma.cart.update({
        where: { cart_id: existingCartItem.cart_id },
        data: { quantity: newQuantity },
      });

      return NextResponse.json({ message: "Updated cart item quantity", cart: updatedCartItem }, { status: 200 });
    } else {
      // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      const newCartItem = await prisma.cart.create({
        data: {
          user_id: parseInt(user_id),
          product_id: parseInt(product_id),
          quantity: finalQuantity,
        },
      });

      return NextResponse.json({ message: "Added item to cart", cart: newCartItem }, { status: 201 });
    }
  } catch (error) {
    console.error("Error adding to cart:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
export async function PUT(req) {
  try {
    const user_id = req.headers.get("X-User-ID");
    if (!user_id) {
      return NextResponse.json({ error: "User ID is missing in headers" }, { status: 400 });
    }

    const body = await req.json();
    const { cart_id, quantity } = body;

    if (!cart_id || !quantity || quantity <= 0) {
      return NextResponse.json({ error: "Invalid cart_id or quantity" }, { status: 400 });
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    const existingCartItem = await prisma.cart.findUnique({
      where: { cart_id: parseInt(cart_id) },
    });

    if (!existingCartItem) {
      return NextResponse.json({ error: "Cart item not found" }, { status: 404 });
    }

    // üîé ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const stockCheck = await checkStock(existingCartItem.product_id);
    if (stockCheck.error) {
      return NextResponse.json({ error: stockCheck.error }, { status: 400 });
    }

    let finalQuantity = quantity > stockCheck.stock ? stockCheck.stock : quantity; // üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å

    // üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const updatedCartItem = await prisma.cart.update({
      where: { cart_id: parseInt(cart_id) },
      data: { quantity: finalQuantity },
    });

    return NextResponse.json({ message: "Cart item updated successfully", cart: updatedCartItem }, { status: 200 });
  } catch (error) {
    console.error("Error updating cart item:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}