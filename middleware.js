import { NextResponse } from 'next/server';
import { jwtVerify } from 'jose';

export async function middleware(request) {
  
  let token = request.headers.get('Authorization');
  const sessionCookie = request.cookies.get('session_id'); // ‚úÖ ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å Cookie

  try {
    if (!token && sessionCookie) {
      token = sessionCookie.value; // ‚úÖ ‡πÉ‡∏ä‡πâ token ‡∏à‡∏≤‡∏Å Cookie ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Header
    }
    

    if (!token) {
      return NextResponse.json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' }, { status: 401 });
    }

    // üîπ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "Bearer " ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å
    const jwtToken = token.startsWith('Bearer ') ? token.substring(7) : token;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Token
    const { payload } = await jwtVerify(jwtToken, new TextEncoder().encode(process.env.JWT_SECRET));

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payload ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    if (!payload || !payload.user_id || !payload.email || !payload.role) {
      return NextResponse.json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå' }, { status: 400 });
    }

    console.log('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', payload);

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ path ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô API ‡∏Ç‡∏≠‡∏á admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (request.url.includes('/api/admin') && payload.role !== 'admin') {
      return NextResponse.json({ message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡∏Ç‡∏≠‡∏á admin' }, { status: 403 });
    }
    if (request.nextUrl.pathname.startsWith('/admin/dashboard') && payload.role !== 'admin') {
      return NextResponse.redirect(new URL('/', request.url));
   }

    // ‚úÖ ‡πÉ‡∏ä‡πâ Headers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç body
    const requestHeaders = new Headers(request.headers);
    requestHeaders.set('X-User-ID', payload.user_id);
    requestHeaders.set('X-User-Email', payload.email);
    requestHeaders.set('X-User-Role', payload.role);
    requestHeaders.set('X-User-Img', payload.img || "");

    return NextResponse.next({
      request: {
        headers: requestHeaders,
      },
    });
  } catch (error) {
    console.error('‚ùå Error in middleware:', error);
    return NextResponse.json({ message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', error: error.message }, { status: 403 });
    
  }
}

// üîπ ‡∏£‡∏∞‡∏ö‡∏∏ API ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Middleware
export const config = {
  matcher: [
    '/api/admin/:path*',  // ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö API ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ /api/admin/*
    '/api/auth/me',
    '/admin/dashboard/:path*',       // ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö /api/auth/me
  ],
};
