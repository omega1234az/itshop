import { NextResponse } from 'next/server';
import { jwtVerify } from 'jose';

export async function middleware(request) {
  let token = request.headers.get('Authorization');
  const sessionCookie = request.cookies.get('session_id'); // ‚úÖ ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å Cookie

  try {
    if (!token && sessionCookie) {
      token = sessionCookie.value; // ‚úÖ ‡πÉ‡∏ä‡πâ token ‡∏à‡∏≤‡∏Å Cookie ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Header
    }

    if (!token) {
      return NextResponse.json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' }, { status: 401 });
    }

    // üîπ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "Bearer " ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å
    const jwtToken = token.startsWith('Bearer ') ? token.substring(7) : token;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Token
    const { payload } = await jwtVerify(jwtToken, new TextEncoder().encode(process.env.JWT_SECRET));

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payload ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    if (!payload || !payload.user_id || !payload.email || !payload.role) {
      return NextResponse.json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå' }, { status: 400 });
    }

    console.log('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', payload);

    // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô Body ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å Request
    let body = {};
    if (request.body) {
      try {
        body = await request.json(); // ‡∏≠‡πà‡∏≤‡∏ô Body ‡πÄ‡∏î‡∏¥‡∏°
      } catch (error) {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô JSON Body ‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô Request ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ Body");
      }
    }

    // ‚úÖ ‡πÅ‡∏ô‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô Body
    const newBody = JSON.stringify({
      ...body, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
      user_id: payload.user_id,
      email: payload.email,
      role: payload.role,
      img: payload.img || "",
    });

    // ‚úÖ ‡∏™‡πà‡∏á Request ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° Body ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    return new NextResponse(newBody, {
      headers: {
        'Content-Type': 'application/json',
      },
    });
  } catch (error) {
    console.error('‚ùå Error in middleware:', error);
    return NextResponse.json({ message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', error: error.message }, { status: 403 });
  }
}

// üîπ ‡∏£‡∏∞‡∏ö‡∏∏ API ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Middleware
export const config = {
  matcher: [
    '/api/admin/:path*',  // ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö API ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ /api/admin/*
    '/api/auth/me',       // ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö /api/auth/me
  ],
};
